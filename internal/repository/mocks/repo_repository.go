// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	model "github.com/duyquang6/git-watchdog/internal/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// RepoRepository is an autogenerated mock type for the RepoRepository type
type RepoRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: tx, data
func (_m *RepoRepository) Create(tx *gorm.DB, data *model.Repository) error {
	ret := _m.Called(tx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.Repository) error); ok {
		r0 = rf(tx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: tx, id
func (_m *RepoRepository) Delete(tx *gorm.DB, id uint) error {
	ret := _m.Called(tx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: tx, id
func (_m *RepoRepository) GetByID(tx *gorm.DB, id uint) (*model.Repository, error) {
	ret := _m.Called(tx, id)

	var r0 *model.Repository
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.Repository); ok {
		r0 = rf(tx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: tx, data
func (_m *RepoRepository) Update(tx *gorm.DB, data *model.Repository) error {
	ret := _m.Called(tx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.Repository) error); ok {
		r0 = rf(tx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
