// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	amqp "github.com/streadway/amqp"
	mock "github.com/stretchr/testify/mock"
)

// IChannel is an autogenerated mock type for the IChannel type
type IChannel struct {
	mock.Mock
}

// Cancel provides a mock function with given fields: tag
func (_m *IChannel) Cancel(tag string) error {
	ret := _m.Called(tag)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *IChannel) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Consume provides a mock function with given fields: autoAck
func (_m *IChannel) Consume(autoAck bool) (<-chan amqp.Delivery, error) {
	ret := _m.Called(autoAck)

	var r0 <-chan amqp.Delivery
	if rf, ok := ret.Get(0).(func(bool) <-chan amqp.Delivery); ok {
		r0 = rf(autoAck)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan amqp.Delivery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(autoAck)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishToQueue provides a mock function with given fields: msg
func (_m *IChannel) PublishToQueue(msg amqp.Publishing) error {
	ret := _m.Called(msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(amqp.Publishing) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
