// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IDelivery is an autogenerated mock type for the IDelivery type
type IDelivery struct {
	mock.Mock
}

// Ack provides a mock function with given fields: multiple
func (_m *IDelivery) Ack(multiple bool) error {
	ret := _m.Called(multiple)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(multiple)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Body provides a mock function with given fields:
func (_m *IDelivery) Body() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// ConsumerTag provides a mock function with given fields:
func (_m *IDelivery) ConsumerTag() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ContentType provides a mock function with given fields:
func (_m *IDelivery) ContentType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DeliveryTag provides a mock function with given fields:
func (_m *IDelivery) DeliveryTag() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Nack provides a mock function with given fields: multiple, requeue
func (_m *IDelivery) Nack(multiple bool, requeue bool) error {
	ret := _m.Called(multiple, requeue)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool, bool) error); ok {
		r0 = rf(multiple, requeue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
